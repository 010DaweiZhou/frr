if HAVE_PROTOBUF
lib_LTLIBRARIES += qpb/libfrr_pb.la
endif

qpb_libfrr_pb_la_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/lib -I$(top_builddir) -I$(top_builddir)/lib \
	$(Q_PROTOBUF_C_CLIENT_INCLUDES)
qpb_libfrr_pb_la_LDFLAGS = -version-info 0:0:0

qpb_libfrr_pb_la_SOURCES = \
	qpb/linear_allocator.h \
	qpb/qpb.h \
	qpb/qpb.c \
	qpb/qpb_allocator.h \
	# end

if HAVE_PROTOBUF
qpb_libfrr_pb_la_SOURCES += qpb/qpb_allocator.c
nodist_qpb_libfrr_pb_la_SOURCES = qpb/qpb.pb-c.c
CLEANFILES += \
	qpb/qpb.pb-c.c \
	qpb/qpb.pb-c.h \
	# end
endif

EXTRA_DIST += qpb/qpb.proto

if HAVE_PROTOBUF

# Uncomment to use an non-system version of libprotobuf-c.
#
# Q_PROTOBUF_C_CLIENT_INCLUDES = -I$(top_srcdir)/third-party/protobuf-c/src
# Q_PROTOBUF_C_CLIENT_LDOPTS = $(top_builddir)/third-party/protobuf-c/src/libprotobuf-c.la

Q_PROTOBUF_C_CLIENT_INCLUDES=
Q_PROTOBUF_C_CLIENT_LDOPTS=-lprotobuf-c

Q_PROTOC=protoc
Q_PROTOC_C=protoc-c

# Rules
.proto.pb.h:
	$(Q_PROTOC) -I$(top_srcdir) --cpp_out=$(top_srcdir) $(top_srcdir)/$^

AM_V_PROTOC_C = $(am__v_PROTOC_C_$(V))
am__v_PROTOC_C_ = $(am__v_PROTOC_C_$(AM_DEFAULT_VERBOSITY))
am__v_PROTOC_C_0 = @echo "  PROTOC_C" $@;
am__v_PROTOC_C_1 =

.proto.pb-c.c:
	$(AM_V_PROTOC_C)$(Q_PROTOC_C) -I$(top_srcdir) --c_out=$(top_srcdir) $(top_srcdir)/$^
.pb-c.c.pb-c.h:
	@/bin/true

#
# Information about how to link to various libraries.
#
Q_FRR_PB_CLIENT_LDOPTS = $(top_srcdir)/qpb/libfrr_pb.la $(Q_PROTOBUF_C_CLIENT_LDOPTS)

Q_FPM_PB_CLIENT_LDOPTS = $(top_srcdir)/fpm/libfrrfpm_pb.la $(Q_FRR_PB_CLIENT_LDOPTS)

endif  # HAVE_PROTOBUF
